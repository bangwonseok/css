///////////////////////////////////////////////////////////////
// CONSTANT

var _CONST = {
	RESULT : {
		SUCCESS : "success",
		FAIL : "fail"
	},
	COOKIE_NAME : {
		CHAT_DISPLAY_BY_USER : "_LF_CHAT_DISPLAY_BY_USER",
		SUPPORT_DISPLAY_BY_USER : "_LF_SUPPORT_DISPLAY_BY_USER",
		SUPPORT_ALERT_CLOSED : "_LF_SUPPORT_ALERT_CLOSED_",
		STORED_TASK : "_LF_STORED_TASK",
		DEBUG_MODE : "_LF_DEBUG_MODE"
	},
	PAYPLAN : {
		NO : "NO",
		FREE : "FR",
		BASIC : "BS",
		STANDARD : "ST",
		PRO : "PR"
	}
};
///////////////////////////////////////////////////////////////


var _UTIL = {
	iam : "",
	debugMode : false,
	cookieBaseDomain : ""
};

_UTIL.setIam = function(iam){
	_UTIL.iam = iam;
};

///////////////////////////////////////////////////////////////
// VALUE CHECK
///////////////////////////////////////////////////////////////


_UTIL.isNull = function(obj){
	if(typeof obj === "undefined" || obj === null || obj === false || obj === "undefined" || obj === "null"){
		return true;
	};
	return false;
};


_UTIL.isNotNull = function(obj){
	return !_UTIL.isNull(obj);
};

_UTIL.isEmpty = function(obj){
	if(_UTIL.isNull(obj) || obj === ""){
		return true;
	}
	if(jQuery.isArray(obj) && obj.length == 0){
		return true;
	}
	if(jQuery.isEmptyObject(obj)){
		return true;
	}
	if(obj === "null"){
		return true;
	}

	return false;
};

_UTIL.isNotEmpty = function(obj){
	return !_UTIL.isEmpty(obj);
};

_UTIL.emptyToNull = function(obj){
	return _UTIL.isEmpty(obj) ? null : obj;
};

_UTIL.nullToEmpty = function(obj){
	return _UTIL.isNull(obj) ? "" : obj;
};

_UTIL.isNumber = function(s){
	s += ''; // 문자열로 변환
	s = s.replace(/^\s*|\s*$/g, ''); // 좌우 공백 제거
	if (s == '' || isNaN(s)) return false;
	return true;
};

_UTIL.isTrue = function(value){
	if(typeof value === "undefined"){
        return false;
	}

	return (value === "true" || value === true) ? true : false;
};
_UTIL.isFalse = function(value){
	return !_UTIL.isTrue(value);
};

_UTIL.booleanToString = function(value){
	if(_UTIL.isEmpty(value)){
		return "false";
	}

	return _UTIL.isTrue(value) ? "true" : "false";
};

_UTIL.isContain = function(haystack, needle){
	// haystack 은 String or Json Object
	return JSON.stringify(haystack).indexOf(needle) > -1;
};


_UTIL.parseInt = function(string){
	if(_UTIL.isNull(string)){
		return 0;
	}
	return parseInt(string);
}


///////////////////////////////////////////////////////////////
// COOKIE
///////////////////////////////////////////////////////////////

_UTIL.getCookie = function(name){

    var domain = document.location.hostname;
    if(domain.indexOf("www") == 0)	{
        domain = domain.substring(4);
    }
    // 2차도메인 www 는 empty 와 공유
    if(domain == _UTIL.cookieBaseDomain) {
        name += "_www";
    }

	name = name + '=';
	//var decodedCookie = decodeURIComponent(document.cookie);
	var cookieString = document.cookie;
	var ca = cookieString.split(';');
	for(var i = 0; i <ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return unescape(c.substring(name.length, c.length));
		}
	}
	return "";
};

_UTIL.setCookie = function (name, value, hours){
	var cookies = "";

    var domain = document.location.hostname;
    if(domain.indexOf("www") == 0)	{
        domain = domain.substring(4);
	}
    // 2차도메인 www 는 empty 와 공유
    if(domain == _UTIL.cookieBaseDomain) {
        name += "_www";
    }

	name = name + '=';
	cookies += name + escape(value) + '; path=/ '; // 한글 깨짐을 막기위해 escape(value)를 합니다.

    if(domain == _UTIL.cookieBaseDomain) {
        cookies += '; domain=' + domain;
    }

	if(_UTIL.isNotNull(hours)){
		var expire = new Date();
		expire.setTime(expire.getTime() + (hours*60*60*1000));
		cookies += ';expires=' + expire.toGMTString() + ';';
	}
	document.cookie = cookies;
};

_UTIL.removeCookie = function (name){
	_UTIL.setCookie(name, "", -1);
};

_UTIL.getCookieBaseDomain =	function()	{
    var i=0,domain=document.domain,p=domain.split('.'),s='_gd'+(new Date()).getTime();
    while(i<(p.length-1) && document.cookie.indexOf(s+'='+s)==-1){
        domain = p.slice(-1-(++i)).join('.');
        document.cookie = s+"="+s+";domain="+domain+";";
    }
    document.cookie = s+"=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+domain+";";
    return domain;
};


_UTIL.cookieBaseDomain = _UTIL.getCookieBaseDomain();

///////////////////////////////////////////////////////////////
// LOG
///////////////////////////////////////////////////////////////

_UTIL.enableDebug = function(){
	_UTIL.setCookie(_CONST.debugMode, "true", 24);
	return "DEBUG MODE ENABLED for " + location.hostname;
};
_UTIL.disableDebug = function(){
	_UTIL.setCookie(_CONST.debugMode, "false", 24);
	return "DEBUG MODE DISABLED for " + location.hostname;
};

//_UTIL.debugMode = true;
_UTIL.debugMode = _UTIL.getCookie(_CONST.debugMode) == "true";

_UTIL.log = function(title, obj1, obj2, obj3){
	if(_UTIL.debugMode){
		_UTIL.logLine("========================================================");
		_UTIL.logLine("[LIVEFEED]" + "[I'm " + _UTIL.iam + "]" + title);

		if(_UTIL.isNotNull(obj1)){
			_UTIL.logLine(obj1);
		};
		if(_UTIL.isNotNull(obj2)){
			_UTIL.logLine(obj2);
		};
		if(_UTIL.isNotNull(obj3)){
			_UTIL.logLine(obj3);
		};
	}
};

_UTIL.logError = function(obj){
	if (typeof window.console != "undefined") {
		if (typeof obj == "string" && obj.length > 10000) {
			obj = obj.substr(0, 10000) + "...";
		}
		console.log(obj);
	}
};

_UTIL.logLine = function(obj){
	if(_UTIL.debugMode) {
		if (typeof window.console != "undefined") {
			if (typeof obj == "string" && obj.length > 10000) {
				obj = obj.substr(0, 10000) + "...";
			}
			console.log(obj);
		}
	}
}


///////////////////////////////////////////////////////////////
// STRING
///////////////////////////////////////////////////////////////
_UTIL.removeHtmlEntityTag = function(string){
    string = string.replace(/</gi, "&lt").replace(/>/gi, "&gt;");
	return string;
};

_UTIL.removeString = function(string, target){
	if(_UTIL.isEmpty(string) || _UTIL.isEmpty(target)){ return "";}
	return string.split(target).join("");
};

_UTIL.replaceAll = function(string, search, target){
	if(_UTIL.isEmpty(string) || _UTIL.isEmpty(search) || _UTIL.isEmpty(target)){ return "";}
	return string.split(search).join(target);
};

_UTIL.newlineToBr = function(string){
	if(_UTIL.isEmpty(string)){ return "";}
	return string.replace(/(?:\r\n|\r|\n)/g, '<br/>');
};

_UTIL.brToNewline = function(string){
	if(_UTIL.isEmpty(string)){ return "";}
	return string.replace(/<br\s*[\/]?>/gi, "\n").replace(/&lt;br\s*[\/]?&gt;/gi, "\n");
};

_UTIL.removeBr = function(string){
    if(_UTIL.isEmpty(string)){ return "";}
    return string.replace(/<br\s*[\/]?>/gi, "");
};


///////////////////////////////////////////////////////////////
// HASH CODE
///////////////////////////////////////////////////////////////

_UTIL.getHashCode = function(seed) {

	// INNER METHOD
	this.hex_chr = "0123456789abcdef";
	this.rhex = function(num) {
		str = "";
		for (j = 0; j <= 3; j++)
			str += this.hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F)
				+ this.hex_chr.charAt((num >> (j * 8)) & 0x0F);
		return str;
	}

	/*
	 * Convert a string to a sequence of 16-word blocks, stored as an array.
	 * Append padding bits and the length, as described in the MD5 standard.
	 */
	this.str2blks_MD5 = function(str) {
		var nblk = ((str.length + 8) >> 6) + 1;
		var blks = new Array(nblk * 16);
		for (i = 0; i < nblk * 16; i++)
			blks[i] = 0;
		for (i = 0; i < str.length; i++)
			blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
		blks[i >> 2] |= 0x80 << ((i % 4) * 8);
		blks[nblk * 16 - 2] = str.length * 8;
		return blks;
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations
	 * internally to work around bugs in some JS interpreters.
	 */
	this.add = function(x, y) {
		var lsw = (x & 0xFFFF) + (y & 0xFFFF);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left
	 */
	this.rol = function(num, cnt) {
		return (num << cnt) | (num >>> (32 - cnt));
	}

	/*
	 * These functions implement the basic operation for each round of the
	 * algorithm.
	 */
	this.cmn = function(q, a, b, x, s, t) {
		return this.add(this.rol(this.add(this.add(a, q), this.add(x, t)),
			s), b);
	}
	this.ff = function(a, b, c, d, x, s, t) {
		return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	this.gg = function(a, b, c, d, x, s, t) {
		return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	this.hh = function(a, b, c, d, x, s, t) {
		return this.cmn(b ^ c ^ d, a, b, x, s, t);
	}
	this.ii = function(a, b, c, d, x, s, t) {
		return this.cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Take a string and return the hex representation of its MD5.
	 */
	this.calcMD5 = function(str) {
		x = this.str2blks_MD5(str);
		a = 1732584193;
		b = -271733879;
		c = -1732584194;
		d = 271733878;

		for (i = 0; i < x.length; i += 16) {
			olda = a;
			oldb = b;
			oldc = c;
			oldd = d;

			a = this.ff(a, b, c, d, x[i + 0], 7, -680876936);
			d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);
			c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);
			b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);
			a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);
			d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);
			c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);
			b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);
			a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);
			d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);
			c = this.ff(c, d, a, b, x[i + 10], 17, -42063);
			b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);
			a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);
			d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);
			c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);
			b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);

			a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);
			d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);
			c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);
			b = this.gg(b, c, d, a, x[i + 0], 20, -373897302);
			a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);
			d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);
			c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);
			b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);
			a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);
			d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);
			c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);
			b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);
			a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);
			d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);
			c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);
			b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);

			a = this.hh(a, b, c, d, x[i + 5], 4, -378558);
			d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);
			c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);
			b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);
			a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);
			d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);
			c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);
			b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);
			a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);
			d = this.hh(d, a, b, c, x[i + 0], 11, -358537222);
			c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);
			b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);
			a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);
			d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);
			c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);
			b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);

			a = this.ii(a, b, c, d, x[i + 0], 6, -198630844);
			d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);
			c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);
			b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);
			a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);
			d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);
			c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);
			b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);
			a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);
			d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);
			c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);
			b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);
			a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);
			d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);
			c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);
			b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);

			a = this.add(a, olda);
			b = this.add(b, oldb);
			c = this.add(c, oldc);
			d = this.add(d, oldd);
		}
		return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);
	}

	return this.calcMD5(seed);
};


///////////////////////////////////////////////////////////////
// AJAX
///////////////////////////////////////////////////////////////

_UTIL.getAsyncScript = function(url, callback){
	jQuery.ajaxSetup({
		cache: true
	});

	jQuery.getScript(url, callback);
};

_UTIL.getSync = function(url, param){
	jQuery.ajaxSetup({
		cache: true
	});


	var result;
	jQuery.ajax(url, {async : false, data: param})
		.done(function(data){
			result = data;
		});

	return result;
};

_UTIL.getSyncJSON = function(url, param){
	jQuery.ajaxSetup({
		cache: true
	});

	var result;
	jQuery.ajax(url, {async : false, data: param, dataType:"json"})
		.done(function(data){
			result = jQuery.extend({}, data);
		});

	return result;
};


_UTIL.insertCss = function(src){
	var link = document.createElement('link');
	link.type = "text/css";
	link.rel = "stylesheet";
	link.href = src;

	document.head.appendChild(link);
};




///////////////////////////////////////////////////////////////
// EXPRESSION
///////////////////////////////////////////////////////////////

_UTIL.getByteString = function(byte){
	var UNITS = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

	if(_UTIL.isEmpty(byte)){
		return;
	}
	var exponent = Math.min(Math.floor(Math.log(byte) / Math.log(1000)), UNITS.length - 1);
	var numStr = Number((byte / Math.pow(1000, exponent)).toPrecision(3));
	var unit = UNITS[exponent];

	return numStr + ' ' + unit;
};


///////////////////////////////////////////////////////////////
// BROWSER CHECK
///////////////////////////////////////////////////////////////


_UTIL.isMobile = function(){
	if(/preview.mobile/i.test(location.href)){
		return true;
	}
	return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) ? true : false;
};

_UTIL.isPopup = function(){
	return window.opener && window.opener !== window;
};

_UTIL.getDeviceType = function(){
	return _UTIL.isMobile() ? "mobile" : "pc";
};


_UTIL.isHttps = function(){
	return jQuery(location).attr("protocol") == "https:";
};

_UTIL.isFullUi = function(){
	return (/chat.html|chat.custom.html|iframe.do|previewMobile/i.test(location.href)) ? true : false;
};

_UTIL.isOldIE = function(){
	var version = navigator.appVersion;
	return (version.indexOf("MSIE 6.") > -1 || version.indexOf("MSIE 7.") > -1 || version.indexOf("MSIE 8.") > -1 || version.indexOf("MSIE 9.") > -1) ? true : false;
};

_UTIL.isIE9 = function(){
	var version = navigator.appVersion;
	return (version.indexOf("MSIE 9.") > -1) ? true : false;
};

_UTIL.isPreview = function(){
	return location.href.indexOf("/designCenter/") > -1 || location.href.indexOf("/preview.mobile") > -1;
};

_UTIL.isChrome = function(){
    return (/chrom(e|ium)/.test(navigator.userAgent.toLowerCase())) ? true : false;
};

_UTIL.isIe = function(){
    return (/trident/.test(navigator.userAgent.toLowerCase())) ? true : false;
};
///////////////////////////////////////////////////////////////
// SEARCH
///////////////////////////////////////////////////////////////

_UTIL.searchObject = function(obj, key) {


	for (var i in obj) {
		if (i == key) {
			return obj[i];
		}
		if (typeof obj[i] == 'object') {
			var result = _UTIL.searchObject(obj[i], key);
			if(result){
				return result;
			}
		}
	}
	return false;
};

///////////////////////////////////////////////////////////////
// JSON
///////////////////////////////////////////////////////////////

_UTIL.cloneObject = function(obj){
	return jQuery.extend({}, obj);
};

_UTIL.listToObject = function(list, objectKeyName){
	var object = {};

	$.each(list, function(index, item){
		object[item[objectKeyName]] = item;
	});

	return object;
};